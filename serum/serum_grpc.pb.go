// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: proto/serum.proto

package serum

import (
	context "context"
	basic "github.com/SolmateDev/go-rust-translator/basic"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DexClient is the client API for Dex service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DexClient interface {
	GetMarketPubkeys(ctx context.Context, in *MarketRequest, opts ...grpc.CallOption) (*MarketPubkeys, error)
	ListMarket(ctx context.Context, in *ListMarketRequest, opts ...grpc.CallOption) (*ListMarketResponse, error)
	ConsumeEvents(ctx context.Context, in *ConsumeEventsRequest, opts ...grpc.CallOption) (*basic.SignedTx, error)
	InitOpenOrder(ctx context.Context, in *InitOpenOrderRequest, opts ...grpc.CallOption) (*basic.SignedTx, error)
	NewOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*basic.SignedTx, error)
	CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*basic.SignedTx, error)
	SettleFunds(ctx context.Context, in *SettleFundsRequest, opts ...grpc.CallOption) (*basic.SignedTx, error)
	CloseOpenOrders(ctx context.Context, in *CloseOpenOrderRequest, opts ...grpc.CallOption) (*basic.SignedTx, error)
	MatchOrders(ctx context.Context, in *MatchOrdersRequest, opts ...grpc.CallOption) (*basic.SignedTx, error)
	MonitorQueue(ctx context.Context, in *MonitorQueueRequest, opts ...grpc.CallOption) (Dex_MonitorQueueClient, error)
}

type dexClient struct {
	cc grpc.ClientConnInterface
}

func NewDexClient(cc grpc.ClientConnInterface) DexClient {
	return &dexClient{cc}
}

func (c *dexClient) GetMarketPubkeys(ctx context.Context, in *MarketRequest, opts ...grpc.CallOption) (*MarketPubkeys, error) {
	out := new(MarketPubkeys)
	err := c.cc.Invoke(ctx, "/serum.Dex/GetMarketPubkeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dexClient) ListMarket(ctx context.Context, in *ListMarketRequest, opts ...grpc.CallOption) (*ListMarketResponse, error) {
	out := new(ListMarketResponse)
	err := c.cc.Invoke(ctx, "/serum.Dex/ListMarket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dexClient) ConsumeEvents(ctx context.Context, in *ConsumeEventsRequest, opts ...grpc.CallOption) (*basic.SignedTx, error) {
	out := new(basic.SignedTx)
	err := c.cc.Invoke(ctx, "/serum.Dex/ConsumeEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dexClient) InitOpenOrder(ctx context.Context, in *InitOpenOrderRequest, opts ...grpc.CallOption) (*basic.SignedTx, error) {
	out := new(basic.SignedTx)
	err := c.cc.Invoke(ctx, "/serum.Dex/InitOpenOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dexClient) NewOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*basic.SignedTx, error) {
	out := new(basic.SignedTx)
	err := c.cc.Invoke(ctx, "/serum.Dex/NewOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dexClient) CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*basic.SignedTx, error) {
	out := new(basic.SignedTx)
	err := c.cc.Invoke(ctx, "/serum.Dex/CancelOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dexClient) SettleFunds(ctx context.Context, in *SettleFundsRequest, opts ...grpc.CallOption) (*basic.SignedTx, error) {
	out := new(basic.SignedTx)
	err := c.cc.Invoke(ctx, "/serum.Dex/SettleFunds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dexClient) CloseOpenOrders(ctx context.Context, in *CloseOpenOrderRequest, opts ...grpc.CallOption) (*basic.SignedTx, error) {
	out := new(basic.SignedTx)
	err := c.cc.Invoke(ctx, "/serum.Dex/CloseOpenOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dexClient) MatchOrders(ctx context.Context, in *MatchOrdersRequest, opts ...grpc.CallOption) (*basic.SignedTx, error) {
	out := new(basic.SignedTx)
	err := c.cc.Invoke(ctx, "/serum.Dex/MatchOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dexClient) MonitorQueue(ctx context.Context, in *MonitorQueueRequest, opts ...grpc.CallOption) (Dex_MonitorQueueClient, error) {
	stream, err := c.cc.NewStream(ctx, &Dex_ServiceDesc.Streams[0], "/serum.Dex/MonitorQueue", opts...)
	if err != nil {
		return nil, err
	}
	x := &dexMonitorQueueClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dex_MonitorQueueClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type dexMonitorQueueClient struct {
	grpc.ClientStream
}

func (x *dexMonitorQueueClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DexServer is the server API for Dex service.
// All implementations must embed UnimplementedDexServer
// for forward compatibility
type DexServer interface {
	GetMarketPubkeys(context.Context, *MarketRequest) (*MarketPubkeys, error)
	ListMarket(context.Context, *ListMarketRequest) (*ListMarketResponse, error)
	ConsumeEvents(context.Context, *ConsumeEventsRequest) (*basic.SignedTx, error)
	InitOpenOrder(context.Context, *InitOpenOrderRequest) (*basic.SignedTx, error)
	NewOrder(context.Context, *Order) (*basic.SignedTx, error)
	CancelOrder(context.Context, *CancelOrderRequest) (*basic.SignedTx, error)
	SettleFunds(context.Context, *SettleFundsRequest) (*basic.SignedTx, error)
	CloseOpenOrders(context.Context, *CloseOpenOrderRequest) (*basic.SignedTx, error)
	MatchOrders(context.Context, *MatchOrdersRequest) (*basic.SignedTx, error)
	MonitorQueue(*MonitorQueueRequest, Dex_MonitorQueueServer) error
	mustEmbedUnimplementedDexServer()
}

// UnimplementedDexServer must be embedded to have forward compatible implementations.
type UnimplementedDexServer struct {
}

func (UnimplementedDexServer) GetMarketPubkeys(context.Context, *MarketRequest) (*MarketPubkeys, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketPubkeys not implemented")
}
func (UnimplementedDexServer) ListMarket(context.Context, *ListMarketRequest) (*ListMarketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMarket not implemented")
}
func (UnimplementedDexServer) ConsumeEvents(context.Context, *ConsumeEventsRequest) (*basic.SignedTx, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsumeEvents not implemented")
}
func (UnimplementedDexServer) InitOpenOrder(context.Context, *InitOpenOrderRequest) (*basic.SignedTx, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitOpenOrder not implemented")
}
func (UnimplementedDexServer) NewOrder(context.Context, *Order) (*basic.SignedTx, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewOrder not implemented")
}
func (UnimplementedDexServer) CancelOrder(context.Context, *CancelOrderRequest) (*basic.SignedTx, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOrder not implemented")
}
func (UnimplementedDexServer) SettleFunds(context.Context, *SettleFundsRequest) (*basic.SignedTx, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SettleFunds not implemented")
}
func (UnimplementedDexServer) CloseOpenOrders(context.Context, *CloseOpenOrderRequest) (*basic.SignedTx, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseOpenOrders not implemented")
}
func (UnimplementedDexServer) MatchOrders(context.Context, *MatchOrdersRequest) (*basic.SignedTx, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MatchOrders not implemented")
}
func (UnimplementedDexServer) MonitorQueue(*MonitorQueueRequest, Dex_MonitorQueueServer) error {
	return status.Errorf(codes.Unimplemented, "method MonitorQueue not implemented")
}
func (UnimplementedDexServer) mustEmbedUnimplementedDexServer() {}

// UnsafeDexServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DexServer will
// result in compilation errors.
type UnsafeDexServer interface {
	mustEmbedUnimplementedDexServer()
}

func RegisterDexServer(s grpc.ServiceRegistrar, srv DexServer) {
	s.RegisterService(&Dex_ServiceDesc, srv)
}

func _Dex_GetMarketPubkeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DexServer).GetMarketPubkeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serum.Dex/GetMarketPubkeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DexServer).GetMarketPubkeys(ctx, req.(*MarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dex_ListMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DexServer).ListMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serum.Dex/ListMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DexServer).ListMarket(ctx, req.(*ListMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dex_ConsumeEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsumeEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DexServer).ConsumeEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serum.Dex/ConsumeEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DexServer).ConsumeEvents(ctx, req.(*ConsumeEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dex_InitOpenOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitOpenOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DexServer).InitOpenOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serum.Dex/InitOpenOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DexServer).InitOpenOrder(ctx, req.(*InitOpenOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dex_NewOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DexServer).NewOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serum.Dex/NewOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DexServer).NewOrder(ctx, req.(*Order))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dex_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DexServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serum.Dex/CancelOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DexServer).CancelOrder(ctx, req.(*CancelOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dex_SettleFunds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettleFundsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DexServer).SettleFunds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serum.Dex/SettleFunds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DexServer).SettleFunds(ctx, req.(*SettleFundsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dex_CloseOpenOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseOpenOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DexServer).CloseOpenOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serum.Dex/CloseOpenOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DexServer).CloseOpenOrders(ctx, req.(*CloseOpenOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dex_MatchOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DexServer).MatchOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serum.Dex/MatchOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DexServer).MatchOrders(ctx, req.(*MatchOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dex_MonitorQueue_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MonitorQueueRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DexServer).MonitorQueue(m, &dexMonitorQueueServer{stream})
}

type Dex_MonitorQueueServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type dexMonitorQueueServer struct {
	grpc.ServerStream
}

func (x *dexMonitorQueueServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

// Dex_ServiceDesc is the grpc.ServiceDesc for Dex service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dex_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "serum.Dex",
	HandlerType: (*DexServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMarketPubkeys",
			Handler:    _Dex_GetMarketPubkeys_Handler,
		},
		{
			MethodName: "ListMarket",
			Handler:    _Dex_ListMarket_Handler,
		},
		{
			MethodName: "ConsumeEvents",
			Handler:    _Dex_ConsumeEvents_Handler,
		},
		{
			MethodName: "InitOpenOrder",
			Handler:    _Dex_InitOpenOrder_Handler,
		},
		{
			MethodName: "NewOrder",
			Handler:    _Dex_NewOrder_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _Dex_CancelOrder_Handler,
		},
		{
			MethodName: "SettleFunds",
			Handler:    _Dex_SettleFunds_Handler,
		},
		{
			MethodName: "CloseOpenOrders",
			Handler:    _Dex_CloseOpenOrders_Handler,
		},
		{
			MethodName: "MatchOrders",
			Handler:    _Dex_MatchOrders_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MonitorQueue",
			Handler:       _Dex_MonitorQueue_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/serum.proto",
}
