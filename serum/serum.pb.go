// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: proto/serum.proto

package serum

import (
	basic "github.com/SolmateDev/go-rust-translator/basic"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SelfTradeBehavior int32

const (
	SelfTradeBehavior_DecrementTake    SelfTradeBehavior = 0
	SelfTradeBehavior_CancelProvide    SelfTradeBehavior = 1
	SelfTradeBehavior_AbortTransaction SelfTradeBehavior = 2
)

// Enum value maps for SelfTradeBehavior.
var (
	SelfTradeBehavior_name = map[int32]string{
		0: "DecrementTake",
		1: "CancelProvide",
		2: "AbortTransaction",
	}
	SelfTradeBehavior_value = map[string]int32{
		"DecrementTake":    0,
		"CancelProvide":    1,
		"AbortTransaction": 2,
	}
)

func (x SelfTradeBehavior) Enum() *SelfTradeBehavior {
	p := new(SelfTradeBehavior)
	*p = x
	return p
}

func (x SelfTradeBehavior) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SelfTradeBehavior) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_serum_proto_enumTypes[0].Descriptor()
}

func (SelfTradeBehavior) Type() protoreflect.EnumType {
	return &file_proto_serum_proto_enumTypes[0]
}

func (x SelfTradeBehavior) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SelfTradeBehavior.Descriptor instead.
func (SelfTradeBehavior) EnumDescriptor() ([]byte, []int) {
	return file_proto_serum_proto_rawDescGZIP(), []int{0}
}

type OrderType int32

const (
	OrderType_Limit             OrderType = 0
	OrderType_ImmediateOrCancel OrderType = 1
	OrderType_PostOnly          OrderType = 2
)

// Enum value maps for OrderType.
var (
	OrderType_name = map[int32]string{
		0: "Limit",
		1: "ImmediateOrCancel",
		2: "PostOnly",
	}
	OrderType_value = map[string]int32{
		"Limit":             0,
		"ImmediateOrCancel": 1,
		"PostOnly":          2,
	}
)

func (x OrderType) Enum() *OrderType {
	p := new(OrderType)
	*p = x
	return p
}

func (x OrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_serum_proto_enumTypes[1].Descriptor()
}

func (OrderType) Type() protoreflect.EnumType {
	return &file_proto_serum_proto_enumTypes[1]
}

func (x OrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderType.Descriptor instead.
func (OrderType) EnumDescriptor() ([]byte, []int) {
	return file_proto_serum_proto_rawDescGZIP(), []int{1}
}

type MarketState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Market:
	//	*MarketState_Id
	//	*MarketState_State
	Market isMarketState_Market `protobuf_oneof:"market"`
}

func (x *MarketState) Reset() {
	*x = MarketState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_serum_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketState) ProtoMessage() {}

func (x *MarketState) ProtoReflect() protoreflect.Message {
	mi := &file_proto_serum_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketState.ProtoReflect.Descriptor instead.
func (*MarketState) Descriptor() ([]byte, []int) {
	return file_proto_serum_proto_rawDescGZIP(), []int{0}
}

func (m *MarketState) GetMarket() isMarketState_Market {
	if m != nil {
		return m.Market
	}
	return nil
}

func (x *MarketState) GetId() *basic.Pubkey {
	if x, ok := x.GetMarket().(*MarketState_Id); ok {
		return x.Id
	}
	return nil
}

func (x *MarketState) GetState() *MarketPubkeys {
	if x, ok := x.GetMarket().(*MarketState_State); ok {
		return x.State
	}
	return nil
}

type isMarketState_Market interface {
	isMarketState_Market()
}

type MarketState_Id struct {
	Id *basic.Pubkey `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type MarketState_State struct {
	State *MarketPubkeys `protobuf:"bytes,2,opt,name=state,proto3,oneof"`
}

func (*MarketState_Id) isMarketState_Market() {}

func (*MarketState_State) isMarketState_Market() {}

type InitOpenOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DexProgramId *basic.ProgramId `protobuf:"bytes,1,opt,name=dex_program_id,json=dexProgramId,proto3" json:"dex_program_id,omitempty"`
	Owner        *basic.Keypair   `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Market       *MarketState     `protobuf:"bytes,3,opt,name=market,proto3" json:"market,omitempty"`
	Orders       *basic.Pubkey    `protobuf:"bytes,4,opt,name=orders,proto3" json:"orders,omitempty"`
}

func (x *InitOpenOrderRequest) Reset() {
	*x = InitOpenOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_serum_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitOpenOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitOpenOrderRequest) ProtoMessage() {}

func (x *InitOpenOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_serum_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitOpenOrderRequest.ProtoReflect.Descriptor instead.
func (*InitOpenOrderRequest) Descriptor() ([]byte, []int) {
	return file_proto_serum_proto_rawDescGZIP(), []int{1}
}

func (x *InitOpenOrderRequest) GetDexProgramId() *basic.ProgramId {
	if x != nil {
		return x.DexProgramId
	}
	return nil
}

func (x *InitOpenOrderRequest) GetOwner() *basic.Keypair {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *InitOpenOrderRequest) GetMarket() *MarketState {
	if x != nil {
		return x.Market
	}
	return nil
}

func (x *InitOpenOrderRequest) GetOrders() *basic.Pubkey {
	if x != nil {
		return x.Orders
	}
	return nil
}

type CloseOpenOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DexProgramId *basic.ProgramId `protobuf:"bytes,1,opt,name=dex_program_id,json=dexProgramId,proto3" json:"dex_program_id,omitempty"`
	Owner        *basic.Keypair   `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Market       *MarketState     `protobuf:"bytes,3,opt,name=market,proto3" json:"market,omitempty"`
	Orders       *basic.Pubkey    `protobuf:"bytes,4,opt,name=orders,proto3" json:"orders,omitempty"`
}

func (x *CloseOpenOrderRequest) Reset() {
	*x = CloseOpenOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_serum_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseOpenOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseOpenOrderRequest) ProtoMessage() {}

func (x *CloseOpenOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_serum_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseOpenOrderRequest.ProtoReflect.Descriptor instead.
func (*CloseOpenOrderRequest) Descriptor() ([]byte, []int) {
	return file_proto_serum_proto_rawDescGZIP(), []int{2}
}

func (x *CloseOpenOrderRequest) GetDexProgramId() *basic.ProgramId {
	if x != nil {
		return x.DexProgramId
	}
	return nil
}

func (x *CloseOpenOrderRequest) GetOwner() *basic.Keypair {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *CloseOpenOrderRequest) GetMarket() *MarketState {
	if x != nil {
		return x.Market
	}
	return nil
}

func (x *CloseOpenOrderRequest) GetOrders() *basic.Pubkey {
	if x != nil {
		return x.Orders
	}
	return nil
}

type CancelOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DexProgramId *basic.ProgramId `protobuf:"bytes,1,opt,name=dex_program_id,json=dexProgramId,proto3" json:"dex_program_id,omitempty"`
	Owner        *basic.Keypair   `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Market       *MarketState     `protobuf:"bytes,3,opt,name=market,proto3" json:"market,omitempty"`
	Orders       *basic.Pubkey    `protobuf:"bytes,4,opt,name=orders,proto3" json:"orders,omitempty"`
	Id           uint64           `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CancelOrderRequest) Reset() {
	*x = CancelOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_serum_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelOrderRequest) ProtoMessage() {}

func (x *CancelOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_serum_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelOrderRequest.ProtoReflect.Descriptor instead.
func (*CancelOrderRequest) Descriptor() ([]byte, []int) {
	return file_proto_serum_proto_rawDescGZIP(), []int{3}
}

func (x *CancelOrderRequest) GetDexProgramId() *basic.ProgramId {
	if x != nil {
		return x.DexProgramId
	}
	return nil
}

func (x *CancelOrderRequest) GetOwner() *basic.Keypair {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *CancelOrderRequest) GetMarket() *MarketState {
	if x != nil {
		return x.Market
	}
	return nil
}

func (x *CancelOrderRequest) GetOrders() *basic.Pubkey {
	if x != nil {
		return x.Orders
	}
	return nil
}

func (x *CancelOrderRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ListMarketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarketPubkeys *MarketPubkeys  `protobuf:"bytes,1,opt,name=market_pubkeys,json=marketPubkeys,proto3" json:"market_pubkeys,omitempty"`
	Tx            *basic.SignedTx `protobuf:"bytes,2,opt,name=tx,proto3" json:"tx,omitempty"`
}

func (x *ListMarketResponse) Reset() {
	*x = ListMarketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_serum_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMarketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMarketResponse) ProtoMessage() {}

func (x *ListMarketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_serum_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMarketResponse.ProtoReflect.Descriptor instead.
func (*ListMarketResponse) Descriptor() ([]byte, []int) {
	return file_proto_serum_proto_rawDescGZIP(), []int{4}
}

func (x *ListMarketResponse) GetMarketPubkeys() *MarketPubkeys {
	if x != nil {
		return x.MarketPubkeys
	}
	return nil
}

func (x *ListMarketResponse) GetTx() *basic.SignedTx {
	if x != nil {
		return x.Tx
	}
	return nil
}

type Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Order:
	//	*Order_V3
	Order isOrder_Order `protobuf_oneof:"order"`
	//: Pubkey,
	DexProgramId *basic.ProgramId `protobuf:"bytes,2,opt,name=dex_program_id,json=dexProgramId,proto3" json:"dex_program_id,omitempty"`
	//: String (file path)
	Payer  *basic.Keypair `protobuf:"bytes,3,opt,name=payer,proto3" json:"payer,omitempty"`
	Wallet *basic.Pubkey  `protobuf:"bytes,4,opt,name=wallet,proto3" json:"wallet,omitempty"`
	Market *MarketState   `protobuf:"bytes,5,opt,name=market,proto3" json:"market,omitempty"`
	// optional
	Orders *basic.Pubkey `protobuf:"bytes,6,opt,name=orders,proto3" json:"orders,omitempty"`
}

func (x *Order) Reset() {
	*x = Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_serum_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_proto_serum_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_proto_serum_proto_rawDescGZIP(), []int{5}
}

func (m *Order) GetOrder() isOrder_Order {
	if m != nil {
		return m.Order
	}
	return nil
}

func (x *Order) GetV3() *NewOrderInstructionV3 {
	if x, ok := x.GetOrder().(*Order_V3); ok {
		return x.V3
	}
	return nil
}

func (x *Order) GetDexProgramId() *basic.ProgramId {
	if x != nil {
		return x.DexProgramId
	}
	return nil
}

func (x *Order) GetPayer() *basic.Keypair {
	if x != nil {
		return x.Payer
	}
	return nil
}

func (x *Order) GetWallet() *basic.Pubkey {
	if x != nil {
		return x.Wallet
	}
	return nil
}

func (x *Order) GetMarket() *MarketState {
	if x != nil {
		return x.Market
	}
	return nil
}

func (x *Order) GetOrders() *basic.Pubkey {
	if x != nil {
		return x.Orders
	}
	return nil
}

type isOrder_Order interface {
	isOrder_Order()
}

type Order_V3 struct {
	V3 *NewOrderInstructionV3 `protobuf:"bytes,1,opt,name=v3,proto3,oneof"`
}

func (*Order_V3) isOrder_Order() {}

type OrderStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusWithSlot *basic.TxStatusWithSlot `protobuf:"bytes,1,opt,name=status_with_slot,json=statusWithSlot,proto3" json:"status_with_slot,omitempty"`
}

func (x *OrderStatus) Reset() {
	*x = OrderStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_serum_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderStatus) ProtoMessage() {}

func (x *OrderStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_serum_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderStatus.ProtoReflect.Descriptor instead.
func (*OrderStatus) Descriptor() ([]byte, []int) {
	return file_proto_serum_proto_rawDescGZIP(), []int{6}
}

func (x *OrderStatus) GetStatusWithSlot() *basic.TxStatusWithSlot {
	if x != nil {
		return x.StatusWithSlot
	}
	return nil
}

type NewOrderInstructionV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// true=buy; false=sell;
	Side bool `protobuf:"varint,1,opt,name=side,proto3" json:"side,omitempty"`
	// non-zero
	LimitPrice uint64 `protobuf:"varint,2,opt,name=limit_price,json=limitPrice,proto3" json:"limit_price,omitempty"`
	// non-zero
	MaxCoinQty uint64 `protobuf:"varint,3,opt,name=max_coin_qty,json=maxCoinQty,proto3" json:"max_coin_qty,omitempty"`
	// non-zero
	MaxNativePcQtyIncludingFees uint64            `protobuf:"varint,4,opt,name=max_native_pc_qty_including_fees,json=maxNativePcQtyIncludingFees,proto3" json:"max_native_pc_qty_including_fees,omitempty"`
	SelfTradeBehavior           SelfTradeBehavior `protobuf:"varint,5,opt,name=self_trade_behavior,json=selfTradeBehavior,proto3,enum=serum.SelfTradeBehavior" json:"self_trade_behavior,omitempty"`
	OrderType                   OrderType         `protobuf:"varint,6,opt,name=order_type,json=orderType,proto3,enum=serum.OrderType" json:"order_type,omitempty"`
	ClientOrderId               uint64            `protobuf:"varint,7,opt,name=client_order_id,json=clientOrderId,proto3" json:"client_order_id,omitempty"`
	// u16 limit
	Limit uint32 `protobuf:"varint,8,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *NewOrderInstructionV3) Reset() {
	*x = NewOrderInstructionV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_serum_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewOrderInstructionV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewOrderInstructionV3) ProtoMessage() {}

func (x *NewOrderInstructionV3) ProtoReflect() protoreflect.Message {
	mi := &file_proto_serum_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewOrderInstructionV3.ProtoReflect.Descriptor instead.
func (*NewOrderInstructionV3) Descriptor() ([]byte, []int) {
	return file_proto_serum_proto_rawDescGZIP(), []int{7}
}

func (x *NewOrderInstructionV3) GetSide() bool {
	if x != nil {
		return x.Side
	}
	return false
}

func (x *NewOrderInstructionV3) GetLimitPrice() uint64 {
	if x != nil {
		return x.LimitPrice
	}
	return 0
}

func (x *NewOrderInstructionV3) GetMaxCoinQty() uint64 {
	if x != nil {
		return x.MaxCoinQty
	}
	return 0
}

func (x *NewOrderInstructionV3) GetMaxNativePcQtyIncludingFees() uint64 {
	if x != nil {
		return x.MaxNativePcQtyIncludingFees
	}
	return 0
}

func (x *NewOrderInstructionV3) GetSelfTradeBehavior() SelfTradeBehavior {
	if x != nil {
		return x.SelfTradeBehavior
	}
	return SelfTradeBehavior_DecrementTake
}

func (x *NewOrderInstructionV3) GetOrderType() OrderType {
	if x != nil {
		return x.OrderType
	}
	return OrderType_Limit
}

func (x *NewOrderInstructionV3) GetClientOrderId() uint64 {
	if x != nil {
		return x.ClientOrderId
	}
	return 0
}

func (x *NewOrderInstructionV3) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//	*Event_Bid
	//	*Event_Ask
	Event isEvent_Event `protobuf_oneof:"event"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_serum_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_proto_serum_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_proto_serum_proto_rawDescGZIP(), []int{8}
}

func (m *Event) GetEvent() isEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *Event) GetBid() *Bid {
	if x, ok := x.GetEvent().(*Event_Bid); ok {
		return x.Bid
	}
	return nil
}

func (x *Event) GetAsk() *Ask {
	if x, ok := x.GetEvent().(*Event_Ask); ok {
		return x.Ask
	}
	return nil
}

type isEvent_Event interface {
	isEvent_Event()
}

type Event_Bid struct {
	Bid *Bid `protobuf:"bytes,1,opt,name=bid,proto3,oneof"`
}

type Event_Ask struct {
	Ask *Ask `protobuf:"bytes,2,opt,name=ask,proto3,oneof"`
}

func (*Event_Bid) isEvent_Event() {}

func (*Event_Ask) isEvent_Event() {}

type Bid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Bid) Reset() {
	*x = Bid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_serum_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bid) ProtoMessage() {}

func (x *Bid) ProtoReflect() protoreflect.Message {
	mi := &file_proto_serum_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bid.ProtoReflect.Descriptor instead.
func (*Bid) Descriptor() ([]byte, []int) {
	return file_proto_serum_proto_rawDescGZIP(), []int{9}
}

type Ask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Ask) Reset() {
	*x = Ask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_serum_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ask) ProtoMessage() {}

func (x *Ask) ProtoReflect() protoreflect.Message {
	mi := &file_proto_serum_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ask.ProtoReflect.Descriptor instead.
func (*Ask) Descriptor() ([]byte, []int) {
	return file_proto_serum_proto_rawDescGZIP(), []int{10}
}

type ConsumeEventUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CrankCount int64  `protobuf:"varint,1,opt,name=crank_count,json=crankCount,proto3" json:"crank_count,omitempty"`
	Status     string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ConsumeEventUpdate) Reset() {
	*x = ConsumeEventUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_serum_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsumeEventUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumeEventUpdate) ProtoMessage() {}

func (x *ConsumeEventUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_serum_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumeEventUpdate.ProtoReflect.Descriptor instead.
func (*ConsumeEventUpdate) Descriptor() ([]byte, []int) {
	return file_proto_serum_proto_rawDescGZIP(), []int{11}
}

func (x *ConsumeEventUpdate) GetCrankCount() int64 {
	if x != nil {
		return x.CrankCount
	}
	return 0
}

func (x *ConsumeEventUpdate) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type MarketPubkeys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Market         *basic.Pubkey `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
	ReqQ           *basic.Pubkey `protobuf:"bytes,2,opt,name=req_q,json=reqQ,proto3" json:"req_q,omitempty"`
	EventQ         *basic.Pubkey `protobuf:"bytes,3,opt,name=event_q,json=eventQ,proto3" json:"event_q,omitempty"`
	Bids           *basic.Pubkey `protobuf:"bytes,4,opt,name=bids,proto3" json:"bids,omitempty"`
	Asks           *basic.Pubkey `protobuf:"bytes,5,opt,name=asks,proto3" json:"asks,omitempty"`
	CoinVault      *basic.Pubkey `protobuf:"bytes,6,opt,name=coin_vault,json=coinVault,proto3" json:"coin_vault,omitempty"`
	PcVault        *basic.Pubkey `protobuf:"bytes,7,opt,name=pc_vault,json=pcVault,proto3" json:"pc_vault,omitempty"`
	VaultSignerKey *basic.Pubkey `protobuf:"bytes,8,opt,name=vault_signer_key,json=vaultSignerKey,proto3" json:"vault_signer_key,omitempty"`
}

func (x *MarketPubkeys) Reset() {
	*x = MarketPubkeys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_serum_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketPubkeys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketPubkeys) ProtoMessage() {}

func (x *MarketPubkeys) ProtoReflect() protoreflect.Message {
	mi := &file_proto_serum_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketPubkeys.ProtoReflect.Descriptor instead.
func (*MarketPubkeys) Descriptor() ([]byte, []int) {
	return file_proto_serum_proto_rawDescGZIP(), []int{12}
}

func (x *MarketPubkeys) GetMarket() *basic.Pubkey {
	if x != nil {
		return x.Market
	}
	return nil
}

func (x *MarketPubkeys) GetReqQ() *basic.Pubkey {
	if x != nil {
		return x.ReqQ
	}
	return nil
}

func (x *MarketPubkeys) GetEventQ() *basic.Pubkey {
	if x != nil {
		return x.EventQ
	}
	return nil
}

func (x *MarketPubkeys) GetBids() *basic.Pubkey {
	if x != nil {
		return x.Bids
	}
	return nil
}

func (x *MarketPubkeys) GetAsks() *basic.Pubkey {
	if x != nil {
		return x.Asks
	}
	return nil
}

func (x *MarketPubkeys) GetCoinVault() *basic.Pubkey {
	if x != nil {
		return x.CoinVault
	}
	return nil
}

func (x *MarketPubkeys) GetPcVault() *basic.Pubkey {
	if x != nil {
		return x.PcVault
	}
	return nil
}

func (x *MarketPubkeys) GetVaultSignerKey() *basic.Pubkey {
	if x != nil {
		return x.VaultSignerKey
	}
	return nil
}

type ConsumeEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//: Pubkey,
	DexProgramId *basic.ProgramId `protobuf:"bytes,1,opt,name=dex_program_id,json=dexProgramId,proto3" json:"dex_program_id,omitempty"`
	//: String (file path)
	Payer *basic.Keypair `protobuf:"bytes,2,opt,name=payer,proto3" json:"payer,omitempty"`
	//: Pubkey,
	Market *MarketState `protobuf:"bytes,3,opt,name=market,proto3" json:"market,omitempty"`
	//: Pubkey,
	CoinWallet *basic.Pubkey `protobuf:"bytes,4,opt,name=coin_wallet,json=coinWallet,proto3" json:"coin_wallet,omitempty"`
	//: Pubkey,
	PcWallet *basic.Pubkey `protobuf:"bytes,5,opt,name=pc_wallet,json=pcWallet,proto3" json:"pc_wallet,omitempty"`
	//: usize,
	NumWorkers uint64 `protobuf:"varint,6,opt,name=num_workers,json=numWorkers,proto3" json:"num_workers,omitempty"`
	//: usize,
	EventsPerWorker uint64 `protobuf:"varint,7,opt,name=events_per_worker,json=eventsPerWorker,proto3" json:"events_per_worker,omitempty"`
	// num_accounts: Option<usize>,
	NumAccounts uint64 `protobuf:"varint,8,opt,name=num_accounts,json=numAccounts,proto3" json:"num_accounts,omitempty"`
	//: String,
	LogDirectory string `protobuf:"bytes,9,opt,name=log_directory,json=logDirectory,proto3" json:"log_directory,omitempty"`
	// : Option<u64>,
	MaxQLength uint64 `protobuf:"varint,10,opt,name=max_q_length,json=maxQLength,proto3" json:"max_q_length,omitempty"`
	//: Option<u64>,
	MaxWaitForEventsDelay uint64 `protobuf:"varint,11,opt,name=max_wait_for_events_delay,json=maxWaitForEventsDelay,proto3" json:"max_wait_for_events_delay,omitempty"`
}

func (x *ConsumeEventsRequest) Reset() {
	*x = ConsumeEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_serum_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsumeEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumeEventsRequest) ProtoMessage() {}

func (x *ConsumeEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_serum_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumeEventsRequest.ProtoReflect.Descriptor instead.
func (*ConsumeEventsRequest) Descriptor() ([]byte, []int) {
	return file_proto_serum_proto_rawDescGZIP(), []int{13}
}

func (x *ConsumeEventsRequest) GetDexProgramId() *basic.ProgramId {
	if x != nil {
		return x.DexProgramId
	}
	return nil
}

func (x *ConsumeEventsRequest) GetPayer() *basic.Keypair {
	if x != nil {
		return x.Payer
	}
	return nil
}

func (x *ConsumeEventsRequest) GetMarket() *MarketState {
	if x != nil {
		return x.Market
	}
	return nil
}

func (x *ConsumeEventsRequest) GetCoinWallet() *basic.Pubkey {
	if x != nil {
		return x.CoinWallet
	}
	return nil
}

func (x *ConsumeEventsRequest) GetPcWallet() *basic.Pubkey {
	if x != nil {
		return x.PcWallet
	}
	return nil
}

func (x *ConsumeEventsRequest) GetNumWorkers() uint64 {
	if x != nil {
		return x.NumWorkers
	}
	return 0
}

func (x *ConsumeEventsRequest) GetEventsPerWorker() uint64 {
	if x != nil {
		return x.EventsPerWorker
	}
	return 0
}

func (x *ConsumeEventsRequest) GetNumAccounts() uint64 {
	if x != nil {
		return x.NumAccounts
	}
	return 0
}

func (x *ConsumeEventsRequest) GetLogDirectory() string {
	if x != nil {
		return x.LogDirectory
	}
	return ""
}

func (x *ConsumeEventsRequest) GetMaxQLength() uint64 {
	if x != nil {
		return x.MaxQLength
	}
	return 0
}

func (x *ConsumeEventsRequest) GetMaxWaitForEventsDelay() uint64 {
	if x != nil {
		return x.MaxWaitForEventsDelay
	}
	return 0
}

type MatchOrdersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//: Pubkey,
	DexProgramId *basic.ProgramId `protobuf:"bytes,1,opt,name=dex_program_id,json=dexProgramId,proto3" json:"dex_program_id,omitempty"`
	//    : String,
	Payer *basic.Keypair `protobuf:"bytes,2,opt,name=payer,proto3" json:"payer,omitempty"`
	//    : Pubkey,
	Market *MarketState `protobuf:"bytes,3,opt,name=market,proto3" json:"market,omitempty"`
	//    : Pubkey,
	CoinWallet *basic.Pubkey `protobuf:"bytes,4,opt,name=coin_wallet,json=coinWallet,proto3" json:"coin_wallet,omitempty"`
	//    : Pubkey,
	PcWallet *basic.Pubkey `protobuf:"bytes,5,opt,name=pc_wallet,json=pcWallet,proto3" json:"pc_wallet,omitempty"`
}

func (x *MatchOrdersRequest) Reset() {
	*x = MatchOrdersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_serum_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchOrdersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchOrdersRequest) ProtoMessage() {}

func (x *MatchOrdersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_serum_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchOrdersRequest.ProtoReflect.Descriptor instead.
func (*MatchOrdersRequest) Descriptor() ([]byte, []int) {
	return file_proto_serum_proto_rawDescGZIP(), []int{14}
}

func (x *MatchOrdersRequest) GetDexProgramId() *basic.ProgramId {
	if x != nil {
		return x.DexProgramId
	}
	return nil
}

func (x *MatchOrdersRequest) GetPayer() *basic.Keypair {
	if x != nil {
		return x.Payer
	}
	return nil
}

func (x *MatchOrdersRequest) GetMarket() *MarketState {
	if x != nil {
		return x.Market
	}
	return nil
}

func (x *MatchOrdersRequest) GetCoinWallet() *basic.Pubkey {
	if x != nil {
		return x.CoinWallet
	}
	return nil
}

func (x *MatchOrdersRequest) GetPcWallet() *basic.Pubkey {
	if x != nil {
		return x.PcWallet
	}
	return nil
}

type MonitorQueueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//: Pubkey,
	DexProgramId *basic.ProgramId `protobuf:"bytes,1,opt,name=dex_program_id,json=dexProgramId,proto3" json:"dex_program_id,omitempty"`
	//: Pubkey,
	Market *MarketState `protobuf:"bytes,2,opt,name=market,proto3" json:"market,omitempty"`
	//: u16,
	Port uint32 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *MonitorQueueRequest) Reset() {
	*x = MonitorQueueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_serum_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitorQueueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorQueueRequest) ProtoMessage() {}

func (x *MonitorQueueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_serum_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorQueueRequest.ProtoReflect.Descriptor instead.
func (*MonitorQueueRequest) Descriptor() ([]byte, []int) {
	return file_proto_serum_proto_rawDescGZIP(), []int{15}
}

func (x *MonitorQueueRequest) GetDexProgramId() *basic.ProgramId {
	if x != nil {
		return x.DexProgramId
	}
	return nil
}

func (x *MonitorQueueRequest) GetMarket() *MarketState {
	if x != nil {
		return x.Market
	}
	return nil
}

func (x *MonitorQueueRequest) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type PrintEventQueue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//: Pubkey,
	DexProgramId *basic.ProgramId `protobuf:"bytes,1,opt,name=dex_program_id,json=dexProgramId,proto3" json:"dex_program_id,omitempty"`
	//: Pubkey,
	Market *basic.Pubkey `protobuf:"bytes,2,opt,name=market,proto3" json:"market,omitempty"`
}

func (x *PrintEventQueue) Reset() {
	*x = PrintEventQueue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_serum_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrintEventQueue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrintEventQueue) ProtoMessage() {}

func (x *PrintEventQueue) ProtoReflect() protoreflect.Message {
	mi := &file_proto_serum_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrintEventQueue.ProtoReflect.Descriptor instead.
func (*PrintEventQueue) Descriptor() ([]byte, []int) {
	return file_proto_serum_proto_rawDescGZIP(), []int{16}
}

func (x *PrintEventQueue) GetDexProgramId() *basic.ProgramId {
	if x != nil {
		return x.DexProgramId
	}
	return nil
}

func (x *PrintEventQueue) GetMarket() *basic.Pubkey {
	if x != nil {
		return x.Market
	}
	return nil
}

type WholeShebang struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//: String,
	Payer *basic.Keypair `protobuf:"bytes,1,opt,name=payer,proto3" json:"payer,omitempty"`
	//: Pubkey,
	DexProgramId *basic.ProgramId `protobuf:"bytes,2,opt,name=dex_program_id,json=dexProgramId,proto3" json:"dex_program_id,omitempty"`
}

func (x *WholeShebang) Reset() {
	*x = WholeShebang{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_serum_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WholeShebang) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WholeShebang) ProtoMessage() {}

func (x *WholeShebang) ProtoReflect() protoreflect.Message {
	mi := &file_proto_serum_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WholeShebang.ProtoReflect.Descriptor instead.
func (*WholeShebang) Descriptor() ([]byte, []int) {
	return file_proto_serum_proto_rawDescGZIP(), []int{17}
}

func (x *WholeShebang) GetPayer() *basic.Keypair {
	if x != nil {
		return x.Payer
	}
	return nil
}

func (x *WholeShebang) GetDexProgramId() *basic.ProgramId {
	if x != nil {
		return x.DexProgramId
	}
	return nil
}

type SettleFundsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//: String,
	Payer *basic.Keypair `protobuf:"bytes,1,opt,name=payer,proto3" json:"payer,omitempty"`
	//: Pubkey,
	DexProgramId *basic.ProgramId `protobuf:"bytes,2,opt,name=dex_program_id,json=dexProgramId,proto3" json:"dex_program_id,omitempty"`
	//: Pubkey,
	Market *MarketState `protobuf:"bytes,3,opt,name=market,proto3" json:"market,omitempty"`
	//: Pubkey,
	Orders *basic.Pubkey `protobuf:"bytes,4,opt,name=orders,proto3" json:"orders,omitempty"`
	// : Pubkey,
	CoinWallet *basic.Pubkey `protobuf:"bytes,5,opt,name=coin_wallet,json=coinWallet,proto3" json:"coin_wallet,omitempty"`
	//: Pubkey,
	PcWallet *basic.Pubkey `protobuf:"bytes,6,opt,name=pc_wallet,json=pcWallet,proto3" json:"pc_wallet,omitempty"`
	//: Option<String>,
	Signer *basic.Keypair `protobuf:"bytes,7,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (x *SettleFundsRequest) Reset() {
	*x = SettleFundsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_serum_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettleFundsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettleFundsRequest) ProtoMessage() {}

func (x *SettleFundsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_serum_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettleFundsRequest.ProtoReflect.Descriptor instead.
func (*SettleFundsRequest) Descriptor() ([]byte, []int) {
	return file_proto_serum_proto_rawDescGZIP(), []int{18}
}

func (x *SettleFundsRequest) GetPayer() *basic.Keypair {
	if x != nil {
		return x.Payer
	}
	return nil
}

func (x *SettleFundsRequest) GetDexProgramId() *basic.ProgramId {
	if x != nil {
		return x.DexProgramId
	}
	return nil
}

func (x *SettleFundsRequest) GetMarket() *MarketState {
	if x != nil {
		return x.Market
	}
	return nil
}

func (x *SettleFundsRequest) GetOrders() *basic.Pubkey {
	if x != nil {
		return x.Orders
	}
	return nil
}

func (x *SettleFundsRequest) GetCoinWallet() *basic.Pubkey {
	if x != nil {
		return x.CoinWallet
	}
	return nil
}

func (x *SettleFundsRequest) GetPcWallet() *basic.Pubkey {
	if x != nil {
		return x.PcWallet
	}
	return nil
}

func (x *SettleFundsRequest) GetSigner() *basic.Keypair {
	if x != nil {
		return x.Signer
	}
	return nil
}

type ListMarketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//payer: String,
	Payer *basic.Keypair `protobuf:"bytes,1,opt,name=payer,proto3" json:"payer,omitempty"`
	//dex_program_id: Pubkey,
	DexProgramId *basic.ProgramId `protobuf:"bytes,2,opt,name=dex_program_id,json=dexProgramId,proto3" json:"dex_program_id,omitempty"`
	//coin_mint: Pubkey,
	CoinMint *basic.Pubkey `protobuf:"bytes,3,opt,name=coin_mint,json=coinMint,proto3" json:"coin_mint,omitempty"`
	//pc_mint: Pubkey,
	PcMint *basic.Pubkey `protobuf:"bytes,4,opt,name=pc_mint,json=pcMint,proto3" json:"pc_mint,omitempty"`
	// coin_lot_size: Option<u64>,
	CoinLotSize uint64 `protobuf:"varint,5,opt,name=coin_lot_size,json=coinLotSize,proto3" json:"coin_lot_size,omitempty"`
	//pc_lot_size: Option<u64>,
	PcLotSize uint64 `protobuf:"varint,6,opt,name=pc_lot_size,json=pcLotSize,proto3" json:"pc_lot_size,omitempty"`
}

func (x *ListMarketRequest) Reset() {
	*x = ListMarketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_serum_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMarketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMarketRequest) ProtoMessage() {}

func (x *ListMarketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_serum_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMarketRequest.ProtoReflect.Descriptor instead.
func (*ListMarketRequest) Descriptor() ([]byte, []int) {
	return file_proto_serum_proto_rawDescGZIP(), []int{19}
}

func (x *ListMarketRequest) GetPayer() *basic.Keypair {
	if x != nil {
		return x.Payer
	}
	return nil
}

func (x *ListMarketRequest) GetDexProgramId() *basic.ProgramId {
	if x != nil {
		return x.DexProgramId
	}
	return nil
}

func (x *ListMarketRequest) GetCoinMint() *basic.Pubkey {
	if x != nil {
		return x.CoinMint
	}
	return nil
}

func (x *ListMarketRequest) GetPcMint() *basic.Pubkey {
	if x != nil {
		return x.PcMint
	}
	return nil
}

func (x *ListMarketRequest) GetCoinLotSize() uint64 {
	if x != nil {
		return x.CoinLotSize
	}
	return 0
}

func (x *ListMarketRequest) GetPcLotSize() uint64 {
	if x != nil {
		return x.PcLotSize
	}
	return 0
}

type InitializeTokenAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//mint: Pubkey,
	Mint *basic.Pubkey `protobuf:"bytes,1,opt,name=mint,proto3" json:"mint,omitempty"`
	//owner_account: String,
	OwnerAccount *basic.Pubkey `protobuf:"bytes,2,opt,name=owner_account,json=ownerAccount,proto3" json:"owner_account,omitempty"`
}

func (x *InitializeTokenAccount) Reset() {
	*x = InitializeTokenAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_serum_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitializeTokenAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitializeTokenAccount) ProtoMessage() {}

func (x *InitializeTokenAccount) ProtoReflect() protoreflect.Message {
	mi := &file_proto_serum_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitializeTokenAccount.ProtoReflect.Descriptor instead.
func (*InitializeTokenAccount) Descriptor() ([]byte, []int) {
	return file_proto_serum_proto_rawDescGZIP(), []int{20}
}

func (x *InitializeTokenAccount) GetMint() *basic.Pubkey {
	if x != nil {
		return x.Mint
	}
	return nil
}

func (x *InitializeTokenAccount) GetOwnerAccount() *basic.Pubkey {
	if x != nil {
		return x.OwnerAccount
	}
	return nil
}

type MarketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DexProgramId *basic.ProgramId `protobuf:"bytes,1,opt,name=dex_program_id,json=dexProgramId,proto3" json:"dex_program_id,omitempty"`
	Market       *basic.Pubkey    `protobuf:"bytes,2,opt,name=market,proto3" json:"market,omitempty"`
}

func (x *MarketRequest) Reset() {
	*x = MarketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_serum_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketRequest) ProtoMessage() {}

func (x *MarketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_serum_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketRequest.ProtoReflect.Descriptor instead.
func (*MarketRequest) Descriptor() ([]byte, []int) {
	return file_proto_serum_proto_rawDescGZIP(), []int{21}
}

func (x *MarketRequest) GetDexProgramId() *basic.ProgramId {
	if x != nil {
		return x.DexProgramId
	}
	return nil
}

func (x *MarketRequest) GetMarket() *basic.Pubkey {
	if x != nil {
		return x.Market
	}
	return nil
}

var File_proto_serum_proto protoreflect.FileDescriptor

var file_proto_serum_proto_rawDesc = []byte{
	0x0a, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x73, 0x65, 0x72, 0x75, 0x6d, 0x1a, 0x11, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x66, 0x0a,
	0x0b, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x61, 0x73, 0x69, 0x63,
	0x2e, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73,
	0x65, 0x72, 0x75, 0x6d, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6b, 0x65,
	0x79, 0x73, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x22, 0xc7, 0x01, 0x0a, 0x14, 0x49, 0x6e, 0x69, 0x74, 0x4f, 0x70,
	0x65, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36,
	0x0a, 0x0e, 0x64, 0x65, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x52, 0x0c, 0x64, 0x65, 0x78, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x4b, 0x65,
	0x79, 0x70, 0x61, 0x69, 0x72, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x06,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73,
	0x65, 0x72, 0x75, 0x6d, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x25, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x61, 0x73, 0x69, 0x63,
	0x2e, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x22,
	0xc8, 0x01, 0x0a, 0x15, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0e, 0x64, 0x65, 0x78,
	0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x49, 0x64, 0x52, 0x0c, 0x64, 0x65, 0x78, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49,
	0x64, 0x12, 0x24, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x4b, 0x65, 0x79, 0x70, 0x61, 0x69, 0x72,
	0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x75, 0x6d, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x06, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x12, 0x25, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x50, 0x75, 0x62, 0x6b,
	0x65, 0x79, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x22, 0xd5, 0x01, 0x0a, 0x12, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x36, 0x0a, 0x0e, 0x64, 0x65, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x61, 0x73, 0x69,
	0x63, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x52, 0x0c, 0x64, 0x65, 0x78,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x05, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x61, 0x73, 0x69, 0x63,
	0x2e, 0x4b, 0x65, 0x79, 0x70, 0x61, 0x69, 0x72, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12,
	0x2a, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x73, 0x65, 0x72, 0x75, 0x6d, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x25, 0x0a, 0x06, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x61,
	0x73, 0x69, 0x63, 0x2e, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x72, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0e, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x75, 0x6d, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50,
	0x75, 0x62, 0x6b, 0x65, 0x79, 0x73, 0x52, 0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x75,
	0x62, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x1f, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x54, 0x78, 0x52, 0x02, 0x74, 0x78, 0x22, 0x98, 0x02, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x2e, 0x0a, 0x02, 0x76, 0x33, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73,
	0x65, 0x72, 0x75, 0x6d, 0x2e, 0x4e, 0x65, 0x77, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x33, 0x48, 0x00, 0x52, 0x02, 0x76, 0x33,
	0x12, 0x36, 0x0a, 0x0e, 0x64, 0x65, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x61, 0x73, 0x69, 0x63,
	0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x52, 0x0c, 0x64, 0x65, 0x78, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x05, 0x70, 0x61, 0x79, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2e,
	0x4b, 0x65, 0x79, 0x70, 0x61, 0x69, 0x72, 0x52, 0x05, 0x70, 0x61, 0x79, 0x65, 0x72, 0x12, 0x25,
	0x0a, 0x06, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x52, 0x06, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x75, 0x6d, 0x2e, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x12, 0x25, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79,
	0x52, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x22, 0x50, 0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x41, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f,
	0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73,
	0x69, 0x63, 0x2e, 0x54, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53,
	0x6c, 0x6f, 0x74, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53,
	0x6c, 0x6f, 0x74, 0x22, 0xee, 0x02, 0x0a, 0x15, 0x4e, 0x65, 0x77, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x33, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x69, 0x64,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x71,
	0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x69,
	0x6e, 0x51, 0x74, 0x79, 0x12, 0x45, 0x0a, 0x20, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x70, 0x63, 0x5f, 0x71, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1b,
	0x6d, 0x61, 0x78, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x63, 0x51, 0x74, 0x79, 0x49, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x13, 0x73,
	0x65, 0x6c, 0x66, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x75, 0x6d,
	0x2e, 0x53, 0x65, 0x6c, 0x66, 0x54, 0x72, 0x61, 0x64, 0x65, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x52, 0x11, 0x73, 0x65, 0x6c, 0x66, 0x54, 0x72, 0x61, 0x64, 0x65, 0x42, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x73, 0x65, 0x72, 0x75,
	0x6d, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x22, 0x50, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a,
	0x03, 0x62, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x73, 0x65, 0x72,
	0x75, 0x6d, 0x2e, 0x42, 0x69, 0x64, 0x48, 0x00, 0x52, 0x03, 0x62, 0x69, 0x64, 0x12, 0x1e, 0x0a,
	0x03, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x73, 0x65, 0x72,
	0x75, 0x6d, 0x2e, 0x41, 0x73, 0x6b, 0x48, 0x00, 0x52, 0x03, 0x61, 0x73, 0x6b, 0x42, 0x07, 0x0a,
	0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x05, 0x0a, 0x03, 0x42, 0x69, 0x64, 0x22, 0x05, 0x0a,
	0x03, 0x41, 0x73, 0x6b, 0x22, 0x4d, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72,
	0x61, 0x6e, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x63, 0x72, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0xd9, 0x02, 0x0a, 0x0d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x75,
	0x62, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x25, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x50, 0x75,
	0x62, 0x6b, 0x65, 0x79, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x05,
	0x72, 0x65, 0x71, 0x5f, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x61,
	0x73, 0x69, 0x63, 0x2e, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x52, 0x04, 0x72, 0x65, 0x71, 0x51,
	0x12, 0x26, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79,
	0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x51, 0x12, 0x21, 0x0a, 0x04, 0x62, 0x69, 0x64, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x50,
	0x75, 0x62, 0x6b, 0x65, 0x79, 0x52, 0x04, 0x62, 0x69, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x04, 0x61,
	0x73, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x61, 0x73, 0x69,
	0x63, 0x2e, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x52, 0x04, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x2c,
	0x0a, 0x0a, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x50, 0x75, 0x62, 0x6b, 0x65,
	0x79, 0x52, 0x09, 0x63, 0x6f, 0x69, 0x6e, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x28, 0x0a, 0x08,
	0x70, 0x63, 0x5f, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x52, 0x07, 0x70,
	0x63, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x37, 0x0a, 0x10, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x52,
	0x0e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x22,
	0xed, 0x03, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0e, 0x64, 0x65, 0x78, 0x5f,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x49, 0x64, 0x52, 0x0c, 0x64, 0x65, 0x78, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64,
	0x12, 0x24, 0x0a, 0x05, 0x70, 0x61, 0x79, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x4b, 0x65, 0x79, 0x70, 0x61, 0x69, 0x72, 0x52,
	0x05, 0x70, 0x61, 0x79, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x75, 0x6d, 0x2e, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2e,
	0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x52, 0x0a, 0x63, 0x6f, 0x69, 0x6e, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x12, 0x2a, 0x0a, 0x09, 0x70, 0x63, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x50, 0x75,
	0x62, 0x6b, 0x65, 0x79, 0x52, 0x08, 0x70, 0x63, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x12,
	0x2a, 0x0a, 0x11, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x77, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x50, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x6e,
	0x75, 0x6d, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x71, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x51, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x38, 0x0a, 0x19, 0x6d, 0x61, 0x78, 0x5f, 0x77, 0x61, 0x69,
	0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x64, 0x65, 0x6c,
	0x61, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x6d, 0x61, 0x78, 0x57, 0x61, 0x69,
	0x74, 0x46, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x22,
	0xfa, 0x01, 0x0a, 0x12, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0e, 0x64, 0x65, 0x78, 0x5f, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64,
	0x52, 0x0c, 0x64, 0x65, 0x78, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x05, 0x70, 0x61, 0x79, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x62, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x4b, 0x65, 0x79, 0x70, 0x61, 0x69, 0x72, 0x52, 0x05, 0x70,
	0x61, 0x79, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x75, 0x6d, 0x2e, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x12, 0x2e, 0x0a, 0x0b, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x50, 0x75,
	0x62, 0x6b, 0x65, 0x79, 0x52, 0x0a, 0x63, 0x6f, 0x69, 0x6e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x12, 0x2a, 0x0a, 0x09, 0x70, 0x63, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x50, 0x75, 0x62, 0x6b,
	0x65, 0x79, 0x52, 0x08, 0x70, 0x63, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x22, 0x8d, 0x01, 0x0a,
	0x13, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0e, 0x64, 0x65, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62,
	0x61, 0x73, 0x69, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x52, 0x0c,
	0x64, 0x65, 0x78, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x06,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73,
	0x65, 0x72, 0x75, 0x6d, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x70, 0x0a, 0x0f,
	0x50, 0x72, 0x69, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12,
	0x36, 0x0a, 0x0e, 0x64, 0x65, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2e,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x52, 0x0c, 0x64, 0x65, 0x78, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2e,
	0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x22, 0x6c,
	0x0a, 0x0c, 0x57, 0x68, 0x6f, 0x6c, 0x65, 0x53, 0x68, 0x65, 0x62, 0x61, 0x6e, 0x67, 0x12, 0x24,
	0x0a, 0x05, 0x70, 0x61, 0x79, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x62, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x4b, 0x65, 0x79, 0x70, 0x61, 0x69, 0x72, 0x52, 0x05, 0x70,
	0x61, 0x79, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x0e, 0x64, 0x65, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62,
	0x61, 0x73, 0x69, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x52, 0x0c,
	0x64, 0x65, 0x78, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x22, 0xc9, 0x02, 0x0a,
	0x12, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x70, 0x61, 0x79, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x4b, 0x65, 0x79, 0x70, 0x61,
	0x69, 0x72, 0x52, 0x05, 0x70, 0x61, 0x79, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x0e, 0x64, 0x65, 0x78,
	0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x49, 0x64, 0x52, 0x0c, 0x64, 0x65, 0x78, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49,
	0x64, 0x12, 0x2a, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x75, 0x6d, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x25, 0x0a,
	0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x62, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x52, 0x06, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x0b, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x61, 0x73, 0x69,
	0x63, 0x2e, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x52, 0x0a, 0x63, 0x6f, 0x69, 0x6e, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x09, 0x70, 0x63, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2e,
	0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x52, 0x08, 0x70, 0x63, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x12, 0x26, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x4b, 0x65, 0x79, 0x70, 0x61, 0x69, 0x72,
	0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x22, 0x89, 0x02, 0x0a, 0x11, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24,
	0x0a, 0x05, 0x70, 0x61, 0x79, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x62, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x4b, 0x65, 0x79, 0x70, 0x61, 0x69, 0x72, 0x52, 0x05, 0x70,
	0x61, 0x79, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x0e, 0x64, 0x65, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62,
	0x61, 0x73, 0x69, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x52, 0x0c,
	0x64, 0x65, 0x78, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x09,
	0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x52, 0x08,
	0x63, 0x6f, 0x69, 0x6e, 0x4d, 0x69, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x07, 0x70, 0x63, 0x5f, 0x6d,
	0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x61, 0x73, 0x69,
	0x63, 0x2e, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x52, 0x06, 0x70, 0x63, 0x4d, 0x69, 0x6e, 0x74,
	0x12, 0x22, 0x0a, 0x0d, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x6c, 0x6f, 0x74, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x6f, 0x69, 0x6e, 0x4c, 0x6f, 0x74,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x70, 0x63, 0x5f, 0x6c, 0x6f, 0x74, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x63, 0x4c, 0x6f, 0x74,
	0x53, 0x69, 0x7a, 0x65, 0x22, 0x6f, 0x0a, 0x16, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21,
	0x0a, 0x04, 0x6d, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62,
	0x61, 0x73, 0x69, 0x63, 0x2e, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x52, 0x04, 0x6d, 0x69, 0x6e,
	0x74, 0x12, 0x32, 0x0a, 0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x61, 0x73, 0x69, 0x63,
	0x2e, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x52, 0x0c, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x6e, 0x0a, 0x0d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0e, 0x64, 0x65, 0x78, 0x5f, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64,
	0x52, 0x0c, 0x64, 0x65, 0x78, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x52, 0x06, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x2a, 0x4f, 0x0a, 0x11, 0x53, 0x65, 0x6c, 0x66, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x65,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x6b, 0x65, 0x10, 0x00, 0x12, 0x11, 0x0a,
	0x0d, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x10, 0x01,
	0x12, 0x14, 0x0a, 0x10, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0x02, 0x2a, 0x3b, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x10, 0x00, 0x12, 0x15,
	0x0a, 0x11, 0x49, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x74, 0x4f, 0x6e, 0x6c,
	0x79, 0x10, 0x02, 0x32, 0xf4, 0x04, 0x0a, 0x03, 0x44, 0x65, 0x78, 0x12, 0x40, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x73, 0x12,
	0x14, 0x2e, 0x73, 0x65, 0x72, 0x75, 0x6d, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x75, 0x6d, 0x2e, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x73, 0x22, 0x00, 0x12, 0x43, 0x0a,
	0x0a, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x18, 0x2e, 0x73, 0x65,
	0x72, 0x75, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x75, 0x6d, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x75, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0f, 0x2e, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54,
	0x78, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0d, 0x49, 0x6e, 0x69, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x75, 0x6d, 0x2e, 0x49, 0x6e, 0x69,
	0x74, 0x4f, 0x70, 0x65, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0f, 0x2e, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x54, 0x78, 0x22, 0x00, 0x12, 0x2b, 0x0a, 0x08, 0x4e, 0x65, 0x77, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x0c, 0x2e, 0x73, 0x65, 0x72, 0x75, 0x6d, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x1a, 0x0f,
	0x2e, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x78, 0x22,
	0x00, 0x12, 0x3b, 0x0a, 0x0b, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x75, 0x6d, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x62, 0x61,
	0x73, 0x69, 0x63, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x78, 0x22, 0x00, 0x12, 0x3b,
	0x0a, 0x0b, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x19, 0x2e,
	0x73, 0x65, 0x72, 0x75, 0x6d, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x64,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x62, 0x61, 0x73, 0x69, 0x63,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x78, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0f, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1c,
	0x2e, 0x73, 0x65, 0x72, 0x75, 0x6d, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x4f, 0x70, 0x65, 0x6e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x62,
	0x61, 0x73, 0x69, 0x63, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x78, 0x22, 0x00, 0x12,
	0x3b, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x19,
	0x2e, 0x73, 0x65, 0x72, 0x75, 0x6d, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x62, 0x61, 0x73, 0x69,
	0x63, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x78, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0c,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x1a, 0x2e, 0x73,
	0x65, 0x72, 0x75, 0x6d, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x73, 0x65, 0x72, 0x75, 0x6d,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x00, 0x30, 0x01, 0x42, 0x30, 0x5a, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x6f, 0x6c, 0x6d, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x76, 0x2f, 0x67, 0x6f, 0x2d, 0x72, 0x75, 0x73, 0x74, 0x2d, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x73, 0x65, 0x72, 0x75, 0x6d, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_serum_proto_rawDescOnce sync.Once
	file_proto_serum_proto_rawDescData = file_proto_serum_proto_rawDesc
)

func file_proto_serum_proto_rawDescGZIP() []byte {
	file_proto_serum_proto_rawDescOnce.Do(func() {
		file_proto_serum_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_serum_proto_rawDescData)
	})
	return file_proto_serum_proto_rawDescData
}

var file_proto_serum_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_serum_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_proto_serum_proto_goTypes = []interface{}{
	(SelfTradeBehavior)(0),         // 0: serum.SelfTradeBehavior
	(OrderType)(0),                 // 1: serum.OrderType
	(*MarketState)(nil),            // 2: serum.MarketState
	(*InitOpenOrderRequest)(nil),   // 3: serum.InitOpenOrderRequest
	(*CloseOpenOrderRequest)(nil),  // 4: serum.CloseOpenOrderRequest
	(*CancelOrderRequest)(nil),     // 5: serum.CancelOrderRequest
	(*ListMarketResponse)(nil),     // 6: serum.ListMarketResponse
	(*Order)(nil),                  // 7: serum.Order
	(*OrderStatus)(nil),            // 8: serum.OrderStatus
	(*NewOrderInstructionV3)(nil),  // 9: serum.NewOrderInstructionV3
	(*Event)(nil),                  // 10: serum.Event
	(*Bid)(nil),                    // 11: serum.Bid
	(*Ask)(nil),                    // 12: serum.Ask
	(*ConsumeEventUpdate)(nil),     // 13: serum.ConsumeEventUpdate
	(*MarketPubkeys)(nil),          // 14: serum.MarketPubkeys
	(*ConsumeEventsRequest)(nil),   // 15: serum.ConsumeEventsRequest
	(*MatchOrdersRequest)(nil),     // 16: serum.MatchOrdersRequest
	(*MonitorQueueRequest)(nil),    // 17: serum.MonitorQueueRequest
	(*PrintEventQueue)(nil),        // 18: serum.PrintEventQueue
	(*WholeShebang)(nil),           // 19: serum.WholeShebang
	(*SettleFundsRequest)(nil),     // 20: serum.SettleFundsRequest
	(*ListMarketRequest)(nil),      // 21: serum.ListMarketRequest
	(*InitializeTokenAccount)(nil), // 22: serum.InitializeTokenAccount
	(*MarketRequest)(nil),          // 23: serum.MarketRequest
	(*basic.Pubkey)(nil),           // 24: basic.Pubkey
	(*basic.ProgramId)(nil),        // 25: basic.ProgramId
	(*basic.Keypair)(nil),          // 26: basic.Keypair
	(*basic.SignedTx)(nil),         // 27: basic.SignedTx
	(*basic.TxStatusWithSlot)(nil), // 28: basic.TxStatusWithSlot
}
var file_proto_serum_proto_depIdxs = []int32{
	24, // 0: serum.MarketState.id:type_name -> basic.Pubkey
	14, // 1: serum.MarketState.state:type_name -> serum.MarketPubkeys
	25, // 2: serum.InitOpenOrderRequest.dex_program_id:type_name -> basic.ProgramId
	26, // 3: serum.InitOpenOrderRequest.owner:type_name -> basic.Keypair
	2,  // 4: serum.InitOpenOrderRequest.market:type_name -> serum.MarketState
	24, // 5: serum.InitOpenOrderRequest.orders:type_name -> basic.Pubkey
	25, // 6: serum.CloseOpenOrderRequest.dex_program_id:type_name -> basic.ProgramId
	26, // 7: serum.CloseOpenOrderRequest.owner:type_name -> basic.Keypair
	2,  // 8: serum.CloseOpenOrderRequest.market:type_name -> serum.MarketState
	24, // 9: serum.CloseOpenOrderRequest.orders:type_name -> basic.Pubkey
	25, // 10: serum.CancelOrderRequest.dex_program_id:type_name -> basic.ProgramId
	26, // 11: serum.CancelOrderRequest.owner:type_name -> basic.Keypair
	2,  // 12: serum.CancelOrderRequest.market:type_name -> serum.MarketState
	24, // 13: serum.CancelOrderRequest.orders:type_name -> basic.Pubkey
	14, // 14: serum.ListMarketResponse.market_pubkeys:type_name -> serum.MarketPubkeys
	27, // 15: serum.ListMarketResponse.tx:type_name -> basic.SignedTx
	9,  // 16: serum.Order.v3:type_name -> serum.NewOrderInstructionV3
	25, // 17: serum.Order.dex_program_id:type_name -> basic.ProgramId
	26, // 18: serum.Order.payer:type_name -> basic.Keypair
	24, // 19: serum.Order.wallet:type_name -> basic.Pubkey
	2,  // 20: serum.Order.market:type_name -> serum.MarketState
	24, // 21: serum.Order.orders:type_name -> basic.Pubkey
	28, // 22: serum.OrderStatus.status_with_slot:type_name -> basic.TxStatusWithSlot
	0,  // 23: serum.NewOrderInstructionV3.self_trade_behavior:type_name -> serum.SelfTradeBehavior
	1,  // 24: serum.NewOrderInstructionV3.order_type:type_name -> serum.OrderType
	11, // 25: serum.Event.bid:type_name -> serum.Bid
	12, // 26: serum.Event.ask:type_name -> serum.Ask
	24, // 27: serum.MarketPubkeys.market:type_name -> basic.Pubkey
	24, // 28: serum.MarketPubkeys.req_q:type_name -> basic.Pubkey
	24, // 29: serum.MarketPubkeys.event_q:type_name -> basic.Pubkey
	24, // 30: serum.MarketPubkeys.bids:type_name -> basic.Pubkey
	24, // 31: serum.MarketPubkeys.asks:type_name -> basic.Pubkey
	24, // 32: serum.MarketPubkeys.coin_vault:type_name -> basic.Pubkey
	24, // 33: serum.MarketPubkeys.pc_vault:type_name -> basic.Pubkey
	24, // 34: serum.MarketPubkeys.vault_signer_key:type_name -> basic.Pubkey
	25, // 35: serum.ConsumeEventsRequest.dex_program_id:type_name -> basic.ProgramId
	26, // 36: serum.ConsumeEventsRequest.payer:type_name -> basic.Keypair
	2,  // 37: serum.ConsumeEventsRequest.market:type_name -> serum.MarketState
	24, // 38: serum.ConsumeEventsRequest.coin_wallet:type_name -> basic.Pubkey
	24, // 39: serum.ConsumeEventsRequest.pc_wallet:type_name -> basic.Pubkey
	25, // 40: serum.MatchOrdersRequest.dex_program_id:type_name -> basic.ProgramId
	26, // 41: serum.MatchOrdersRequest.payer:type_name -> basic.Keypair
	2,  // 42: serum.MatchOrdersRequest.market:type_name -> serum.MarketState
	24, // 43: serum.MatchOrdersRequest.coin_wallet:type_name -> basic.Pubkey
	24, // 44: serum.MatchOrdersRequest.pc_wallet:type_name -> basic.Pubkey
	25, // 45: serum.MonitorQueueRequest.dex_program_id:type_name -> basic.ProgramId
	2,  // 46: serum.MonitorQueueRequest.market:type_name -> serum.MarketState
	25, // 47: serum.PrintEventQueue.dex_program_id:type_name -> basic.ProgramId
	24, // 48: serum.PrintEventQueue.market:type_name -> basic.Pubkey
	26, // 49: serum.WholeShebang.payer:type_name -> basic.Keypair
	25, // 50: serum.WholeShebang.dex_program_id:type_name -> basic.ProgramId
	26, // 51: serum.SettleFundsRequest.payer:type_name -> basic.Keypair
	25, // 52: serum.SettleFundsRequest.dex_program_id:type_name -> basic.ProgramId
	2,  // 53: serum.SettleFundsRequest.market:type_name -> serum.MarketState
	24, // 54: serum.SettleFundsRequest.orders:type_name -> basic.Pubkey
	24, // 55: serum.SettleFundsRequest.coin_wallet:type_name -> basic.Pubkey
	24, // 56: serum.SettleFundsRequest.pc_wallet:type_name -> basic.Pubkey
	26, // 57: serum.SettleFundsRequest.signer:type_name -> basic.Keypair
	26, // 58: serum.ListMarketRequest.payer:type_name -> basic.Keypair
	25, // 59: serum.ListMarketRequest.dex_program_id:type_name -> basic.ProgramId
	24, // 60: serum.ListMarketRequest.coin_mint:type_name -> basic.Pubkey
	24, // 61: serum.ListMarketRequest.pc_mint:type_name -> basic.Pubkey
	24, // 62: serum.InitializeTokenAccount.mint:type_name -> basic.Pubkey
	24, // 63: serum.InitializeTokenAccount.owner_account:type_name -> basic.Pubkey
	25, // 64: serum.MarketRequest.dex_program_id:type_name -> basic.ProgramId
	24, // 65: serum.MarketRequest.market:type_name -> basic.Pubkey
	23, // 66: serum.Dex.GetMarketPubkeys:input_type -> serum.MarketRequest
	21, // 67: serum.Dex.ListMarket:input_type -> serum.ListMarketRequest
	15, // 68: serum.Dex.ConsumeEvents:input_type -> serum.ConsumeEventsRequest
	3,  // 69: serum.Dex.InitOpenOrder:input_type -> serum.InitOpenOrderRequest
	7,  // 70: serum.Dex.NewOrder:input_type -> serum.Order
	5,  // 71: serum.Dex.CancelOrder:input_type -> serum.CancelOrderRequest
	20, // 72: serum.Dex.SettleFunds:input_type -> serum.SettleFundsRequest
	4,  // 73: serum.Dex.CloseOpenOrders:input_type -> serum.CloseOpenOrderRequest
	16, // 74: serum.Dex.MatchOrders:input_type -> serum.MatchOrdersRequest
	17, // 75: serum.Dex.MonitorQueue:input_type -> serum.MonitorQueueRequest
	14, // 76: serum.Dex.GetMarketPubkeys:output_type -> serum.MarketPubkeys
	6,  // 77: serum.Dex.ListMarket:output_type -> serum.ListMarketResponse
	27, // 78: serum.Dex.ConsumeEvents:output_type -> basic.SignedTx
	27, // 79: serum.Dex.InitOpenOrder:output_type -> basic.SignedTx
	27, // 80: serum.Dex.NewOrder:output_type -> basic.SignedTx
	27, // 81: serum.Dex.CancelOrder:output_type -> basic.SignedTx
	27, // 82: serum.Dex.SettleFunds:output_type -> basic.SignedTx
	27, // 83: serum.Dex.CloseOpenOrders:output_type -> basic.SignedTx
	27, // 84: serum.Dex.MatchOrders:output_type -> basic.SignedTx
	10, // 85: serum.Dex.MonitorQueue:output_type -> serum.Event
	76, // [76:86] is the sub-list for method output_type
	66, // [66:76] is the sub-list for method input_type
	66, // [66:66] is the sub-list for extension type_name
	66, // [66:66] is the sub-list for extension extendee
	0,  // [0:66] is the sub-list for field type_name
}

func init() { file_proto_serum_proto_init() }
func file_proto_serum_proto_init() {
	if File_proto_serum_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_serum_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_serum_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitOpenOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_serum_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseOpenOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_serum_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_serum_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMarketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_serum_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_serum_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_serum_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewOrderInstructionV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_serum_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_serum_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_serum_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_serum_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsumeEventUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_serum_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketPubkeys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_serum_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsumeEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_serum_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchOrdersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_serum_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitorQueueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_serum_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrintEventQueue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_serum_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WholeShebang); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_serum_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettleFundsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_serum_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMarketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_serum_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitializeTokenAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_serum_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_serum_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*MarketState_Id)(nil),
		(*MarketState_State)(nil),
	}
	file_proto_serum_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*Order_V3)(nil),
	}
	file_proto_serum_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*Event_Bid)(nil),
		(*Event_Ask)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_serum_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_serum_proto_goTypes,
		DependencyIndexes: file_proto_serum_proto_depIdxs,
		EnumInfos:         file_proto_serum_proto_enumTypes,
		MessageInfos:      file_proto_serum_proto_msgTypes,
	}.Build()
	File_proto_serum_proto = out.File
	file_proto_serum_proto_rawDesc = nil
	file_proto_serum_proto_goTypes = nil
	file_proto_serum_proto_depIdxs = nil
}
